#+TITLE: Daniel Newman's Literate Emacs Configuration
#+AUTHOR: Daniel Newman
#+EMAIL: dwnewman78@gmail.com
#+SETUPFILE: ~/.emacs.d/setupfiles/emacs.setup

* The Beginning
:PROPERTIES:
:CUSTOM_ID: init
:END:
I've seen some cool Emacs configs written out using [[http://orgmode.org/worg/org-contrib/babel/][Org-mode Babel]] to
enclose code within paragraphs of text. I think this will be a cool
way to organize my config and also provide some context around why I
did things the way I did

I am going to attempt to arrange my code in modules and provide a
makefile to make installing convienent

#+BEGIN_SRC emacs-lisp
;; turn on emacs debugging when starting, turn it off later
(setq debug-on-error t)
(setq debug-on-quit t)

(require 'package)
(package-initialize)

;; orgmode.org unfortunately does not support https
(add-to-list 'package-archives
             '("org" . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives
             '("gnu" . "https://elpa.gnu.org/packages/") t)
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)

(setq custom-file "~/.emacs.d/custom.el")
(when (file-exists-p custom-file)
  (load custom-file))

(defvar eos/did-refresh-packages nil
  "Flag for whether packages have been refreshed yet")

(defun install-pkgs (list)
  (dolist (pkg list)
    (progn
      (if (not (package-installed-p pkg))
          (progn
            (if (not eos/did-refresh-packages)
                (progn (package-refresh-contents)
                       (setq eos/did-refresh-packages t)))
            (package-install pkg))))))

(install-pkgs '(use-package))
;; Load use-package, used for loading packages everywhere else
(require 'use-package nil t)
;; Set to t to debug package loading or nil to disable
(setq use-package-verbose nil)

(setq message-log-max 16384)

;; It's about to get personal
(setq user-full-name "Daniel Newman"
      user-mail-address "dwnewman78@gmail.com")

(set-charset-priority 'unicode)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))


;;Setup some variables for use in other config files

(defconst *spell-check-support-enabled* t) ;; Enable with t if you prefer
(defconst *is-a-mac* (eq system-type 'darwin))
(defconst *is-windows* (eq system-type 'windows-nt))
(defconst *is-linux* (eq system-type 'gnu/linux))
(defconst *is-gui* (not (eq window-system nil)))
(defvar running-alternate-emacs nil)

(package-initialize)
;; Setup load path
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))
(require 'init-benchmarking)
(use-package init-utils)
(use-package init-ui)
(use-package init-theme)
(use-package init-ibuffer)
(use-package init-completion)
(use-package init-whitespace)
(use-package init-flycheck)
(use-package init-paredit)
(use-package init-editing)
(use-package init-macos)
(use-package init-elm)
(use-package init-navigation)
;;(use-package init-snippets)
(use-package init-misc)
(use-package init-lisp)
(use-package init-vc)
(use-package init-git)
(use-package init-dired)
(use-package init-python)
(use-package init-grep)
(use-package init-ivy)
(use-package init-session)

;; turn off debugging after emacs starts
(setq debug-on-error nil)
(setq debug-on-quit nil)
#+END_SRC
